AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  VirtualNetwork:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName}
            - ResourceName: VirtualNetwork
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPublicSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 1
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPublicSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 2
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet1NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet1NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VirtualNetworkPrivateSubnet1NatGatewayEIP.AllocationId
      SubnetId: !Ref VirtualNetworkPublicSubnet1
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet1RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1 Route Table
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet1NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VirtualNetworkPrivateSubnet1NatGateway
      RouteTableId: !Ref VirtualNetworkPrivateSubnet1RouteTable
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPrivateSubnet1RouteTable
      SubnetId: !Ref VirtualNetworkPrivateSubnet1
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet2NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet2NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VirtualNetworkPrivateSubnet2NatGatewayEIP.AllocationId
      SubnetId: !Ref VirtualNetworkPublicSubnet2
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet2RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2 Route Table
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet2NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VirtualNetworkPrivateSubnet2NatGateway
      RouteTableId: !Ref VirtualNetworkPrivateSubnet2RouteTable
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPrivateSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPrivateSubnet2RouteTable
      SubnetId: !Ref VirtualNetworkPrivateSubnet2
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPublicSubnetsInternetGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Internet Gateway
            - ResourceName: VirtualNetwork
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPublicSubnetsInternetGatewayAttachment:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VirtualNetworkPublicSubnetsInternetGateway
      VpcId: !Ref VirtualNetwork
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPublicSubnetsRouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Route Table
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPublicSubnetsInternetGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VirtualNetworkPublicSubnetsInternetGateway
      RouteTableId: !Ref VirtualNetworkPublicSubnetsRouteTable
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPublicSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPublicSubnetsRouteTable
      SubnetId: !Ref VirtualNetworkPublicSubnet1
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkPublicSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPublicSubnetsRouteTable
      SubnetId: !Ref VirtualNetworkPublicSubnet2
    Condition: VirtualNetworkCreateNewResource
  VirtualNetworkExistingResource:
    Type: Custom::StackeryExistingResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: virtualNetwork
      Data: !Ref EnvConfigdotnetVirtualNetworkAsString
    Condition: VirtualNetworkUseExistingResource
  Database:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: aurora-mysql
      EngineMode: serverless
      MasterUsername: !Sub '{{resolve:secretsmanager:${DatabaseRootUserSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DatabaseRootUserSecret}:SecretString:password}}'
      EnableHttpEndpoint: true
      ScalingConfiguration:
        AutoPause: false
        MinCapacity: 2
        MaxCapacity: 256
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
    Condition: DatabaseCreateNewResource
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: Database
      SubnetIds:
        - !If
          - VirtualNetworkUseExistingResource
          - !GetAtt VirtualNetworkExistingResource.PrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet1
        - !If
          - VirtualNetworkUseExistingResource
          - !GetAtt VirtualNetworkExistingResource.PrivateSubnet2
          - !Ref VirtualNetworkPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: Database
    Condition: DatabaseCreateNewResource
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: Database
      VpcId: !If
        - VirtualNetworkUseExistingResource
        - !Ref VirtualNetworkExistingResource
        - !Ref VirtualNetwork
    Condition: DatabaseCreateNewResource
  DatabaseRootUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub
        - Root user login info for Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName}
        - ResourceName: Database
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Name: !Sub /${EnvironmentTagName}/${StackTagName}/Database/RootUser
    Condition: DatabaseCreateNewResource
  DatabaseRootUserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseRootUserSecret
      TargetId: !Ref Database
      TargetType: AWS::RDS::DBCluster
    Condition: DatabaseCreateNewResource
  DatabaseExistingResource:
    Type: Custom::StackeryExistingResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: database
      Data: !Ref EnvConfigdotnetDatabaseAsString
    Condition: DatabaseUseExistingResource
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title: !Sub ${AWS::StackName}-HttpApi
          version: '1.0'
        paths:
          /$default:
            x-amazon-apigateway-any-method:
              responses: {}
              isDefaultRoute: true
              x-amazon-apigateway-integration:
                httpMethod: ANY
                type: http_proxy
                uri: !Ref EnvConfigdotnetApplicationEndpointURLAsString
                payloadFormatVersion: '1.0'
          /api/books:
            x-amazon-apigateway-any-method:
              responses: {}
          /api/books/{proxy+}:
            x-amazon-apigateway-any-method:
              responses: {}
      FailOnWarnings: true
  WebApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-WebApi
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: WebApi
      CodeUri: webapi
      Handler: webapi::webapi.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnetcore3.1
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !If
              - DatabaseUseExistingResource
              - !GetAtt DatabaseExistingResource.RootUserSecret
              - !Ref DatabaseRootUserSecret
        - Statement:
            - Effect: Allow
              Action:
                - rds-data:BatchExecuteStatement
                - rds-data:BeginTransaction
                - rds-data:CommitTransaction
                - rds-data:ExecuteStatement
                - rds-data:RollbackTransaction
              Resource:
                - !If
                  - DatabaseUseExistingResource
                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DatabaseExistingResource}
                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${Database}
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      VpcConfig:
        SecurityGroupIds:
          - !If
            - VirtualNetworkUseExistingResource
            - !GetAtt VirtualNetworkExistingResource.DefaultSecurityGroup
            - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !If
            - VirtualNetworkUseExistingResource
            - !GetAtt VirtualNetworkExistingResource.PrivateSubnet1
            - !Ref VirtualNetworkPrivateSubnet1
          - !If
            - VirtualNetworkUseExistingResource
            - !GetAtt VirtualNetworkExistingResource.PrivateSubnet2
            - !Ref VirtualNetworkPrivateSubnet2
      Environment:
        Variables:
          DB_ID: !If
            - DatabaseUseExistingResource
            - !Ref DatabaseExistingResource
            - !Ref Database
          DB_ADDRESS: !If
            - DatabaseUseExistingResource
            - !GetAtt DatabaseExistingResource.Endpoint.Address
            - !GetAtt Database.Endpoint.Address
          DB_PORT: !If
            - DatabaseUseExistingResource
            - !GetAtt DatabaseExistingResource.Endpoint.Port
            - !GetAtt Database.Endpoint.Port
          DB_ARN: !If
            - DatabaseUseExistingResource
            - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DatabaseExistingResource}
            - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${Database}
          DB_ROOT_USER_SECRET_ARN: !If
            - DatabaseUseExistingResource
            - !GetAtt DatabaseExistingResource.RootUserSecret
            - !Ref DatabaseRootUserSecret
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
      Events:
        HttpApiANYapibooks:
          Type: HttpApi
          Properties:
            Path: /api/books
            Method: ANY
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
        HttpApiANYapibooksproxy:
          Type: HttpApi
          Properties:
            Path: /api/books/{proxy+}
            Method: ANY
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
  WebApiScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 10
      ResourceId: !Sub function:${WebApi}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: WebApiAliaslive
  WebApiScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WebApiScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.7
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvConfigdotnetVirtualNetworkAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/dotnet/VirtualNetwork
  EnvConfigdotnetDatabaseAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/dotnet/Database
  EnvConfigdotnetApplicationEndpointURLAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/dotnet/Application/EndpointURL
Conditions:
  VirtualNetworkCreateNewResource: !Equals
    - 'false'
    - !Ref EnvConfigdotnetVirtualNetworkAsString
  VirtualNetworkUseExistingResource: !Not
    - Condition: VirtualNetworkCreateNewResource
  DatabaseCreateNewResource: !Equals
    - 'false'
    - !Ref EnvConfigdotnetDatabaseAsString
  DatabaseUseExistingResource: !Not
    - Condition: DatabaseCreateNewResource
Metadata:
  EnvConfigParameters:
    EnvConfigdotnetVirtualNetworkAsString: dotnet.VirtualNetwork
    EnvConfigdotnetDatabaseAsString: dotnet.Database
    EnvConfigdotnetApplicationEndpointURLAsString: dotnet.Application.EndpointURL